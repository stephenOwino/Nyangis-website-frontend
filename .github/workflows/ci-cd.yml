name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the app
        run: npm run build

      # Step 5: Run tests (if you have tests)
      - name: Run tests
        run: npm test
        if: always()

      # Step 6: Test with Docker Compose
      - name: Test with Docker Compose
        run: |
          docker-compose up -d web
          sleep 10 # Wait for the app to start
          curl --fail http://localhost:5000 || exit 1
          docker-compose down

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            otizaaa/avant-kor-ot:latest
            otizaaa/avant-kor-ot:${{ github.sha }}
          build-args: |
            NODE_ENV=production

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Update ECS service
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster avant-kor-ot-cluster --services avant-kor-ot-service --query 'services[0].status' --output text)
          if [ "$SERVICE_EXISTS" == "ACTIVE" ]; then
            aws ecs update-service \
              --cluster avant-kor-ot-cluster \
              --service avant-kor-ot-service \
              --task-definition avant-kor-ot \
              --force-new-deployment
          else
            aws ecs create-service \
              --cluster avant-kor-ot-cluster \
              --service-name avant-kor-ot-service \
              --task-definition avant-kor-ot \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=${{ secrets.AWS_TARGET_GROUP_ARN }},containerName=avant-kor-ot-container,containerPort=80"
          fi
